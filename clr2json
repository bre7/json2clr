#!/usr/bin/env xcrun swift
// vim: ft=swift

import Foundation
import AppKit

// MARK: - usage

let usage = "clr2json [-n <string>] [-i <path>] [-o <path>]"

let options = [
    "-n": "palette name",
    "-i": "input clr file path",
    "-o": "output json file path",
]

// MARK: - functions

func printUsage() {
    println("Usage: \(usage)\n")
    println("Options:")
    for (option, description) in options {
        println("\t\(option)\t\(description)")
    }
}

// MARK: - options

var paletteName: String!
var inputPath: String!
var outputPath: String!

let arguments = Process.arguments
for i in 0..<arguments.count {
    let argument = arguments[i]
    switch argument {
    case "-n":
        paletteName = (i + 1 < arguments.count) ? arguments[i + 1] : nil
    case "-i":
        inputPath = (i + 1 < arguments.count) ? arguments[i + 1] : nil
    case "-o":
        outputPath = (i + 1 < arguments.count) ? arguments[i + 1] : nil
    default:
        break
    }
}

if nil == inputPath {
    printUsage()
    exit(0)
}

if nil == paletteName {
    paletteName = "New"
}

if nil == outputPath {
    outputPath = "\(paletteName).json"
}

// MARK: - main

if let colorList = NSColorList(name: paletteName, fromFile: inputPath) {

    var dicts = [[String : String]]()

    let keys = colorList.allKeys as [String]
    for key in keys {
        if let color = colorList.colorWithKey(key) {
            var colorDict = [String : String]()
            colorDict["name"] = key
            colorDict["r"] = NSString(format: "%f", Double(color.redComponent))
            colorDict["g"] = NSString(format: "%f", Double(color.greenComponent))
            colorDict["b"] = NSString(format: "%f", Double(color.blueComponent))
            colorDict["a"] = NSString(format: "%f", Double(color.alphaComponent))
            dicts.append(colorDict)
        }
    }

    if let jsonData = NSJSONSerialization.dataWithJSONObject(dicts, options: NSJSONWritingOptions.PrettyPrinted, error: nil) {
        let filePath = (outputPath as NSString).stringByExpandingTildeInPath
        if jsonData.writeToFile(filePath, atomically: true) {
            println("SUCCESS: saved to \(filePath)")
        } else {
            println("FAILED: failed to save to \(filePath)")
        }
    }

}
